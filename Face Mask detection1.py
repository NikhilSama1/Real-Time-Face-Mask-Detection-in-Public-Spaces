# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xou2X_s3gxnRg3WOsl9ggrGy0i_9mdlr
"""

pip install torch opencv-python numpy ultralytics

import cv2
import torch
import numpy as np
from ultralytics import YOLO

# Load the YOLOv5 model (replace 'path/to/yolov5s.pt' with your fine-tuned model path)
model = YOLO('path/to/yolov5s.pt')

# Define class labels (adjust based on your dataset)
class_names = ['with_mask', 'without_mask', 'mask_weared_incorrect']

# Define colors for bounding boxes (BGR format for OpenCV)
colors = {
    'with_mask': (0, 255, 0),           # Green
    'without_mask': (0, 0, 255),        # Red
    'mask_weared_incorrect': (0, 255, 255)  # Yellow
}

# Initialize webcam
cap = cv2.VideoCapture(0)  # 0 for default webcam, or replace with video file path

if not cap.isOpened():
    print("Error: Could not open webcam.")
    exit()

# Set frame dimensions (optional, adjust based on your needs)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

while True:
    ret, frame = cap.read()
    if not ret:
        print("Error: Failed to capture frame.")
        break

    # Perform inference with YOLOv5
    results = model(frame)

    # Process detections
    for det in results.xyxy[0]:  # xyxy format: [xmin, ymin, xmax, ymax, confidence, class]
        if det[4] > 0.5:  # Confidence threshold
            xmin, ymin, xmax, ymax = map(int, det[:4])
            conf = det[4].item()
            cls = int(det[5].item())
            label = class_names[cls]
            color = colors[label]

            # Draw bounding box and label
            cv2.rectangle(frame, (xmin, ymin), (xmax, ymax), color, 2)
            cv2.putText(frame, f'{label} {conf:.2f}', (xmin, ymin - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

    # Display the frame
    cv2.imshow('Face Mask Detection', frame)

    # Exit on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()